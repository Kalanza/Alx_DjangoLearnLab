"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment Configuration
# ==============================================================================
import os
from pathlib import Path

# Load environment variables from .env file
def load_env_file(env_path):
    """Load environment variables from a .env file"""
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ.setdefault(key, value)

# Determine environment and load appropriate .env file
ENVIRONMENT = os.environ.get('DJANGO_ENVIRONMENT', 'development')
env_file = BASE_DIR / f'.env.{ENVIRONMENT}'
load_env_file(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-77a3&gjn_^!5ja_9s4@k9a$$4^h=yea_2w083)*=g_af_zpg96")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "bookshelf",
    "relationship_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "bookshelf.middleware.SecurityHeadersMiddleware",  # Custom security headers
    "bookshelf.middleware.CSPReportingMiddleware",  # CSP reporting
    "bookshelf.middleware.RequestLoggingMiddleware",  # Security logging
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "LibraryProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Project-level templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LibraryProject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Media files (user uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Security Settings
# ==============================================================================

# Security middleware and browser protections
SECURE_BROWSER_XSS_FILTER = True  # Enable XSS filtering in browsers
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing
X_FRAME_OPTIONS = 'DENY'  # Prevent the site from being framed (clickjacking protection)

# HTTPS and SSL Security Configuration
# ==============================================================================

# Environment-based HTTPS settings (configurable for dev/prod)
import os
USE_HTTPS = os.environ.get('USE_HTTPS', 'False').lower() == 'true'

# HTTPS Enforcement Settings
SECURE_SSL_REDIRECT = USE_HTTPS  # Redirect all HTTP to HTTPS in production
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # For proxy/load balancer setups

# HTTP Strict Transport Security (HSTS) Configuration
# HSTS tells browsers to ONLY use HTTPS for your site
SECURE_HSTS_SECONDS = 31536000 if USE_HTTPS else 0  # 1 year in production, disabled in dev
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to all subdomains
SECURE_HSTS_PRELOAD = True  # Allow inclusion in browser HSTS preload lists

# Additional HTTPS Security Headers
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing attacks
SECURE_BROWSER_XSS_FILTER = True  # Enable browser XSS protection
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking by denying framing

# Secure Cookie Configuration
# ==============================================================================

# CSRF Cookie Security
CSRF_COOKIE_SECURE = USE_HTTPS  # Only send CSRF cookies over HTTPS in production
CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF tokens
CSRF_COOKIE_SAMESITE = 'Strict'  # Strict same-site policy for CSRF cookies

# Session Cookie Security  
SESSION_COOKIE_SECURE = USE_HTTPS  # Only send session cookies over HTTPS in production
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
SESSION_COOKIE_SAMESITE = 'Strict'  # Strict same-site policy for session cookies
SESSION_COOKIE_AGE = 3600  # Session timeout: 1 hour for security
SESSION_SAVE_EVERY_REQUEST = True  # Refresh session on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Clear sessions when browser closes

# Additional Cookie Security
CSRF_COOKIE_NAME = '__Host-csrftoken' if USE_HTTPS else 'csrftoken'  # Secure cookie naming
SESSION_COOKIE_NAME = '__Host-sessionid' if USE_HTTPS else 'sessionid'  # Secure cookie naming

# Additional security headers
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'  # Control referrer information

# Content Security Policy (CSP) settings
# Note: In production, consider using django-csp middleware for more advanced CSP
CSP_DEFAULT_SRC = "'self'"
CSP_SCRIPT_SRC = "'self'"
CSP_STYLE_SRC = "'self' 'unsafe-inline'"  # Allow inline styles for basic styling
CSP_IMG_SRC = "'self' data:"
CSP_FONT_SRC = "'self'"
CSP_CONNECT_SRC = "'self'"
CSP_FRAME_SRC = "'none'"
CSP_OBJECT_SRC = "'none'"

# Password validation enhancement
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Increased minimum password length
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Login security
LOGIN_ATTEMPTS_LIMIT = 5  # Custom setting for login attempt limits
LOGIN_ATTEMPTS_TIMEOUT = 300  # 5 minutes timeout after failed attempts

# Logging Configuration for Security Monitoring
# ==============================================================================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'security': {
            'format': 'SECURITY {levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'security.log',
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'security_alerts.log',
            'formatter': 'security',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'security.csp': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}
